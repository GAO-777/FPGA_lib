TITLE "Ethernet packets byte RAM";
-- OSI model   OpenSystem Interface
-- This Module produce function of "Ethernet Signal layer to Data Link layer bridge"
-- Media layer to Electrical Layer is done by external chip LXT972
-- Electrical Layer to Signaling Layer is done by "Tx_Eth100_Sync" and "Fr_ether100_new" functions

INCLUDE "Edge_Sensing_Sync.inc";
INCLUDE "lpm_shiftreg.inc";
INCLUDE "lpm_counter.inc";
INCLUDE "EthBufferRAM2048.inc";
INCLUDE "RAM2048_2p.inc";
INCLUDE "Eth_MAC_Decoder.inc";
INCLUDE "Eth_ARP_Decoder.inc";
INCLUDE "Eth_IPv4_Decoder.inc";
INCLUDE "Eth_Raw_Decoder.inc";
INCLUDE "Eth_CCCD_Decoder.inc";
INCLUDE "IPv4_checkSum.inc";
INCLUDE "Eth_In_FIFO4kb.inc";




CONSTANT PacketLenghts_at_signaling_layer  = 4096;--2048;-- maximum length value in bytes
CONSTANT RxByte_Cnt_Width = Ceil( LOG2(PacketLenghts_at_signaling_layer));

Constant WORD_WIDTH	= 16; 

CONSTANT ETH_HEADER_LENGTH = 14;
CONSTANT IP_HEADER_LENGTH  = 20;
CONSTANT UDP_HEADER_LENGTH = 8;
CONSTANT OPCODE_LENGTH = 2;

CONSTANT KLUKVA_DATA_LENGTH = ((32+512+32)*2)*2; --2304;
CONSTANT HEADER_LENGTH_BYTES = ETH_HEADER_LENGTH + IP_HEADER_LENGTH + UDP_HEADER_LENGTH + OPCODE_LENGTH;
CONSTANT HEADER_LENGTH_WORDS = HEADER_LENGTH_BYTES div 2;
CONSTANT MASS_RAM_BYTE_Tx_Num = HEADER_LENGTH_BYTES + KLUKVA_DATA_LENGTH;



--CONSTANT MASS_RAM_BYTE_Tx_Num = 40+4+2304; -- (IP header + UDP header) + command + (addr+data)
-- ������ ��� ���� "Total length"=MASS_RAM_BYTE_Tx_Num-14
-- ������ ��� ���� "������ UDP"=MASS_RAM_BYTE_Tx_Num-(14+20)

-- payload = (576*2)*2 bytes = 2304



SUBDESIGN Eth_Up_Module
(
   Clock                        : input; -- System Clock, really Bus_Clock
-- PHY Ethernet I/O
   -- Rx section    --Preambula, SOF and CRC are cutted out
  Byte_Strobe_Rx      			: input;
  Rx_Data[7..0]       	 		: input;
  RxPacket_in_progress  		: input;
  RxPacket_End             	: input;
 		Packet_Good_End 			: input; -- CRC result
		Packet_bad_End				: input; -- CRC result
		
  RxIntStart                  : input;
  RxIntStart_out              : output;
   
  Packet_Decode_Error			: output; --next packet is detected while current packet is in processing
  
	-- Tx section
  Byte_Strobe_Tx      			: input;
  Tx_Data[7..0]       	 		: output; 
  Transmit_of_Data_RQ         : output;
  Eth_Tx_In_Progress				: input=GND;	-- Transmittion is in progress(flag), Phy is busy
  Eth_Tx_End						: output; -- ����� �������� �� ������ ��������
  
  Eth_RxTx_In_Progress			: output; -- ������ ������������ �����
  

  -- Standard bus connections
  BUS_Clock                   : input;
  DataBus_In[15..0]			   : input;  -- ������������ � ���������� ���� � ������ ������
  DataBusOut[15..0]     	  	: output; -- ���������� �� ���������� ���� �� ������ ������ (������� 16��� ���� R)
  
  DataBusStrobe 			 	: input;  -- ����� ������/�������� ������ ������ (������� �������, ����������� �� ������� ������)
  Select					 	: input;  -- ����� ������ ��� ������ � ������� ���������� ����� � ������ Slave (� �����-��)
  DirectIn					  	: input;  -- ����������� �������� ������, ���� =GND, �� ������ ������ ��������, ���� =VCC, �� �������.
  AddrBus_In[12..0]			 	: input;  -- ����� ��� ��������� ������� ������/������ ���������� ����� � �����-�
  Reset                        	: input = GND;
  	-- Master Mode Signals 
  AccessRequest			    	: output;
  AccessGranted			    	: input; 
  DirectOut				    	: output;
  AddrBusOut[15..0]	    		: output;
	

)
VARIABLE
   RxByte_Cnt       	    				: LPM_COUNTER WITH (LPM_WIDTH = RxByte_Cnt_Width+1);
   RxByte_Cnt_Reg                 			: LPM_SHIFTREG with (lpm_width=WORD_WIDTH);
   RAM_Overflow								: node;
   RAM_Overflow_SRFF            			: SRFF;
   Cnt_Overflow_Edge						: Edge_Sensing_Sync;
   RxReadyToRecive              			: SRFF;
   SetRxReadyToRecive           			: node;
   SetRxReadyToRecive_Parcer				: node;
   SetRxReadyToRecive_Sc_Bus                : node;
   RxRAM                    				: EthBufferRAM2048;
   RxRAM_CS                 				: node;
   Rx_RAM_Address_Bus[RxByte_Cnt_Width-2..0]: node;
   
   RxIntRAM                    				: RAM2048_2p;
   RxIntRAM_CS								: node;
   RxIntStart_ES                            : Edge_Sensing_Sync;
   RxIntStart_node                          : node;
   Buffer_RAM_Data[WORD_WIDTH-1..0]         : node;
   ParcerCycle_IntStart                     : SRFF;
   
   
   Status_REG                   			: LPM_SHIFTREG with (lpm_width=WORD_WIDTH); -- ������ ������������ (���� ����� ��� ��������)
   Status_REG_CS                			: node;
   Status_REG_ES							: Edge_Sensing_Sync;
   
   RxLostPackcet_ES                   		: Edge_Sensing_Sync; 
   RxLostPacket_node                		: node;
   RxLostPacket_Cnt            				: LPM_COUNTER  WITH (LPM_WIDTH = WORD_WIDTH);
   RxLostPacket_Cnt_REG        				: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   RxLostPacket_Cnt_REG_CS     				: node;
   RxLostPacket_Cnt_REG_ES     				: Edge_Sensing_Sync; 
   
   
   TxByte_Cnt       	    				: LPM_COUNTER WITH (LPM_WIDTH = RxByte_Cnt_Width+1);
   TxRAM                    				: EthBufferRAM2048;
   Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0]: node;
   Tx_RAM_Data_Bus[WORD_WIDTH-1..0]         : node;
   TxRAM_CS                 				: node;
   TxRQ_Reset								: node;
   TxRQ_Reset_ES                			: Edge_Sensing_Sync;
   TxRQ_SRFF                    			: SRFF;
   InternalTxStart              			: node;
   AnswerTxStart							: node;
   AnswerTxStart_							: node;
   TxStart									: node; 
   
   PacketLenghts_to_be_transmitted_Reg    	: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   PacketLenghts_to_be_transmitted_Reg_CS 	: node;
   PacketLenghts_DataBus[WORD_WIDTH-1..0] 	: node;
   PacketLenghts_to_be_transmitted_Reg_EN 	: node;

   TxRAM_wren                               : node;
  
   Module_MAC_Reg[2..0]			   			: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Module_MAC_Reg_CS[2..0]    	   			: node;
   Module_IP_Reg[1..0]			   			: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Module_IP_Reg_CS[1..0]    	   			: node;
   Port_Reg									: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Port_Reg_CS				   	   			: node;
   
   RxWordRecive_Reg							: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Rx_Packet_Lenght_Reg						: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   ParcerCycle_SRFF                         : SRFF;
   ParcerCycleEnd                           : node;
   
   MAC_Decoder                              : Eth_MAC_Decoder;
   Source_MAC_Reg[2..0]						: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   ARP_Decoder                              : Eth_ARP_Decoder;
   IPv4_Decoder                             : Eth_IPv4_Decoder;
   Raw_Decoder                              : Eth_Raw_Decoder;
   CCCD_Decoder                             : Eth_CCCD_Decoder;
   
   Test_Reg									: LPM_SHIFTREG WITH (LPM_WIDTH = WORD_WIDTH);
   Test_Reg_CS				   	   			: node;
   
   
   DataBusOut_[15..0]						: node;	
   
   IPv4_CheckSum_Ctrl						: IPv4_checkSum;
   
   Rx_Packet_Cnt							: LPM_COUNTER WITH (LPM_WIDTH = 16);
   Tx_Packet_Cnt							: LPM_COUNTER WITH (LPM_WIDTH = 16);
   Rx_Packet_Cnt_Reset						: node;
   Tx_Packet_Cnt_Reset						: node;
   
   RxTxCycle_IntStart						: SRFF;
   
   In_FIFO									: Eth_In_FIFO4kb;
   Copy_Byte_Strobe							: node;
   FIFO_to_RxRAM_Copy						: node; -- ������ ���������� ������������� ������ ��������� ������� �������� ������ � ������ ������ � �������� ������
   RAM_Ptr_Packet_End						: node; -- ������ ��������� ����������� ������ �� FIFO � �������� ������ � ������� ��������� ������������ ������
   
   Packet_Good_End_ES						: Edge_Sensing_Sync; -- ��������� ��������� �������� ������ (CRC �������)
   Packet_bad_End_ES						: Edge_Sensing_Sync; -- ��������� ��������� ������� ������ (CRC ���������)
   
   Out_FIFO									: Eth_In_FIFO4kb;
   Tx_FIFO_RQ								: node;
   -- �������� ���������� ����� ��������, ������������� ������
   GuardTime_Cnt                       		: LPM_COUNTER WITH (LPM_WIDTH = 8);
   GuardTime_Cnt_Rst						: node;
   GuardTime								: node;

   
   
BEGIN
-------------------------------------------- Input FIFO --------------------------------------------
	 RxIntStart_out = RxIntStart_ES.q;--RxIntStart;
	 -- ������� FIFO ����������� ������ ���������� �������. ����� ��������� ���� ���������� �������� ������� (RxReadyToRecive.q)
	 -- ���������� ����������� ������ ������ �� �������� FIFO � �������� ������. ������� ��������� ������ ������� ���� FIFO (In_FIFO.q[8], In_FIFO.q[9])
     -- �� ������� ��������� In_FIFO.q[8] (������ �����, �.� ������������ CRC) ������������ ������� ������ �������� ������ 
     -- � ����� ����� ���������� �� ������� �����.
     -- �� ������� ��������� In_FIFO.q[9] (������� �����) ����������� �������� ��������� ������, � ���������� ��������,
     -- ����������� �������� �����.
     -- �������� ��������� ������ ������� �� ������ ����������� �������, ����������� ���� ����� �� ���� ��������� ������
     -- MAC_Decoder  - ������ ��������� ��������� MAC-����� � ������ � ���������� ������� � �������� �����. ���� MAC-����� ������������ �������� ��������� ������ �����������
     -- ARP_Decoder  - ������ �������� �������� ����� MAC_Decoder, ������ ��������� �������� �� ����� ARP-��������. ���� ��, �� ��������� �������� ����� ARP-������� � ��������� �������� ���������. ���� ���, �� �������� ���������� ���������� ������
     -- IPv4_Decoder - ������ ��������� �������� �� ����� IPv4 �����. ���� ��, �� ��������� �������� ����� ������� � ��������� �������� ���������. ���� ���, �� �������� ���������� ���������� ������
     -- CCCD_Decoder - ������ ��������� �������� �� ����� CCCD ����� (��� ������������� ��� ���������). ���� ��, �� ��������� �������� ����� ������� � ��������� �������� ���������. ���� ���, �� �������� ���������� ���������� ������.
     -- Raw_Decoder  - ������ ��������� �������� �� ����� CDCD ����� (��� ������������� ��� ���������). ���� ��, �� ��������� �������� ����� ������� � ��������� �������� ���������. ���� ���, �� ��������� �������� ���������.
     -- � ������ ���� �� ���� ��� ������ �� ��� �������, ���������� ����� ����� �� �������� FIFO � ����� � ������� �����������, 
     -- ����� ����������� �������� �������� ������ ������.
     
     In_FIFO.data[7..0] 	=	Rx_Data[7..0]; 
      
     In_FIFO.data[8] 		=	Packet_bad_End ; -- ������ ��������� ������� ������, ������������ ������� ������ �������� ������. ���� ���������� � ����������� ������ �� �������� FIFO �� ������������
     In_FIFO.data[9] 		=	Packet_Good_End; -- ������ ��������� �������� ������, ������������ ��� ������� ��������� ������
     
     In_FIFO.clock			=	Clock;
     In_FIFO.wrreq  		=	Byte_Strobe_Rx OR RxPacket_End;
     In_FIFO.rdreq  		=	!In_FIFO.empty AND Copy_Byte_Strobe AND RxReadyToRecive.q;    
 
     
     FIFO_to_RxRAM_Copy 	=	!In_FIFO.empty AND Copy_Byte_Strobe AND RxReadyToRecive.q;
     Copy_Byte_Strobe		=	VCC; -- �������� �� ������������ �������� 100���
   -- �������� ��� ����������� ����������� ����� ��������� ������� �� FIFO � �������� ������
   -- ������ ���� ����������� ��� ��������� ������ (������� ����� �������� ����, �� ���� �� ����������. ������ �����)
     
     Packet_Good_End_ES.(d,clk) = (In_FIFO.q[9],Clock);
     Packet_bad_End_ES.(d,clk)  = (In_FIFO.q[8],Clock);

-------------------------------------------- Rx section --------------------------------------------
   RxReadyToRecive.(S,clk,R) = (SetRxReadyToRecive, Clock, RAM_Ptr_Packet_End OR RxIntStart_ES.q);
   --RxReadyToRecive.(S,clk,R) = (SetRxReadyToRecive, Clock, ParcerCycleEnd OR RxIntStart_ES.q);
   SetRxReadyToRecive = SetRxReadyToRecive_Sc_Bus OR SetRxReadyToRecive_Parcer;
   Eth_RxTx_In_Progress = !RxReadyToRecive.q;
  
   RxByte_Cnt.(clock,clk_en,cnt_en,sclr) = (Clock,VCC, FIFO_to_RxRAM_Copy , --Enable to count actual length
													   SetRxReadyToRecive OR Packet_bad_End_ES.q    --Not to clear while processing in progress to know actual length
															); 
   RxByte_Cnt.data[] = MASS_RAM_BYTE_Tx_Num-1;  -- ����� ������������ ���� �� �������� ������
   RxByte_Cnt.sload  = RxIntStart_ES.q;

   IF 	(RxByte_Cnt.q[] == PacketLenghts_at_signaling_layer-1) --Check to not overwrite RAM at ubnormal length packets
		THEN RAM_Overflow	= VCC;
		ELSE RAM_Overflow	= GND;
   END IF;
   RAM_Overflow_SRFF.(S,clk,R) = (Cnt_Overflow_Edge.q,Clock,SetRxReadyToRecive);
   Cnt_Overflow_Edge.(clk,d)	=	(Clock, RAM_Overflow); -- �������� ������ ������
   Packet_Decode_Error = Cnt_Overflow_Edge.q ; -- ����� ����� ������ �� ��� ���� ��������
   
   RAM_Ptr_Packet_End		 = Packet_Good_End_ES.q;
   RxIntStart_ES.(d,clk)     = (RxIntStart AND DFF(.d=RxReadyToRecive.q,.clk=Clock), Clock);
   RxIntStart_node           = DFF(.d=RxIntStart_ES.q,.clk=Clock);
   
   
   IF((RxPacket_in_progress == VCC) AND (RxReadyToRecive.q == GND)) THEN RxLostPacket_node = VCC; -- ��� �������� �����, �.� ������ 
																    ELSE RxLostPacket_node = GND; -- �� ��� ����� � ������
   END IF;
   
   RxRAM.data_a[7..0] = In_FIFO.q[7..0];  -- ������� ������
   RxRAM.(address_a[RxByte_Cnt_Width-1..0]   , clock_a, wren_a                       ) =
         (RxByte_Cnt.q[RxByte_Cnt_Width-1..0], Clock  , FIFO_to_RxRAM_Copy AND !RAM_Overflow_SRFF.q); 

   RxRAM.(address_b[RxByte_Cnt_Width-2..0]     , clock_b  , data_b[15..8]   , data_b[7..0]     , wren_b  ) =
         (Rx_RAM_Address_Bus[], BUS_Clock, DataBus_In[7..0], DataBus_In[15..8], RxRAM_CS AND DataBusStrobe AND DirectIn AND Select); 
      
   
   RxLostPackcet_ES.(d,clk)                            = (RxLostPacket_node, Clock);
   RxLostPacket_Cnt.(clock,clk_en,cnt_en,sclr)        = (Clock, VCC, RxLostPackcet_ES.q, GND%RxPacketError_Cnt_REG_ES.q%);
   RxLostPacket_Cnt_REG.(data[],clock, load, enable)  = (RxLostPacket_Cnt.q[], BUS_Clock, VCC, VCC%RxPacketError_Cnt_REG_ES.q%);
   RxLostPacket_Cnt_REG_ES.(d,clk)                    = (RxLostPacket_Cnt_REG_CS AND Select AND DataBusStrobe, BUS_Clock);

  -------------------------------------------- Output FIFO --------------------------------------------
     Out_FIFO.data[7..0] 	=	TxRAM.q_a[];
      
     Out_FIFO.data[8] 		=	GND; 
     Out_FIFO.data[9] 		=	DFF(.d=TxRQ_Reset_ES.q,.clk=Clock); -- ������ ��������� ������
     
     Out_FIFO.clock			=	Clock;
     Out_FIFO.wrreq  		=	DFF(.d=TxRQ_SRFF.q,.clk=Clock);
     Out_FIFO.rdreq  		=	Byte_Strobe_Tx;    
     -- �������� �� ��������� FIFO ����������, ����� Out_FIFO �� ������, �� ���� �������� ������ �������� ������ 
     -- � ��������� �� ����� �������� �������� ����������
     Tx_FIFO_RQ				=	SRFF(.S=!Out_FIFO.empty AND !Eth_Tx_In_Progress AND !GuardTime,.clk=Clock,.R=Out_FIFO.q[9] AND Byte_Strobe_Tx);--DFF(.d=!Out_FIFO.empty,.clk=Clock);--SRFF(.S=!Out_FIFO.empty AND !Tx_FIFO_RQ,.clk=Clock,.R=Out_FIFO.q[9]); 
 
     Transmit_of_Data_RQ 	=	Tx_FIFO_RQ;
     Tx_Data[] 				=	Out_FIFO.q[7..0];
     
     -- �������� ���������� ����� ��������
     GuardTime_Cnt.(clock,cnt_en,sclr) = (Clock, GuardTime, GuardTime_Cnt_Rst);
     IF(GuardTime_Cnt.q[] > 99) THEN GuardTime_Cnt_Rst = VCC;
								ELSE GuardTime_Cnt_Rst = GND;
	 END IF;
	 GuardTime = SRFF(.S=!Eth_Tx_In_Progress AND DFF(.d=Eth_Tx_In_Progress,.clk=Clock),.clk=Clock,.R=GuardTime_Cnt_Rst);
	 
   ------------------------------------------- Tx section ------------------------------------------------- 
   TxStart = InternalTxStart OR AnswerTxStart;
   TxRQ_SRFF.(S,clk,R) = (TxStart ,Clock,TxRQ_Reset_ES.q OR Reset); 
   TxByte_Cnt.(clock,clk_en,cnt_en,sclr) = (Clock,VCC, TxRQ_SRFF.q AND !Out_FIFO.full, TxStart);
   IF ((TxByte_Cnt.q[] >= PacketLenghts_at_signaling_layer-1) OR (TxByte_Cnt.q[] >= PacketLenghts_to_be_transmitted_Reg.q[RxByte_Cnt_Width..0]))
  		THEN TxRQ_Reset	= VCC;
		ELSE TxRQ_Reset	= GND;
   END IF;
   TxRQ_Reset_ES.(d,clk) = (TxRQ_Reset,Clock);
    

   TxRAM.data_a[7..0] = GND;  
   TxRAM.(address_a[RxByte_Cnt_Width-1..0]   , clock_a, wren_a) =
         (TxByte_Cnt.q[RxByte_Cnt_Width-1..0], Clock  , GND   ); 

   TxRAM.(address_b[RxByte_Cnt_Width-2..0]         , clock_b  , data_b[]         , wren_b  ) =
         (Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0], BUS_Clock, Tx_RAM_Data_Bus[], TxRAM_wren);
         
  

   -------------------------------------------------------------------------------------------------------------------  
   
   
   -----------------------------�������� ������ ��� �������� ������ �� �������� ������--------------------------------  
   RxIntRAM.(address_a[]     	 , clock_a  , data_a[15..8]   , data_a[7..0]     , wren_a  ) =
            (Rx_RAM_Address_Bus[], BUS_Clock  , DataBus_In[7..0], DataBus_In[15..8], GND); 
   RxIntRAM.(address_b[] 		 			  , clock_b  , data_b[15..8]   , data_b[7..0]     , wren_b  ) =
            (AddrBus_In[RxByte_Cnt_Width-2..0], BUS_Clock, DataBus_In[7..0], DataBus_In[15..8], RxIntRAM_CS AND DataBusStrobe AND DirectIn AND Select); 

   ParcerCycle_IntStart.(S,clk,R) = (RxIntStart_ES.q,Clock, ParcerCycleEnd);
   IF(ParcerCycle_IntStart.q==VCC) THEN Buffer_RAM_Data[]=RxIntRAM.q_a[];
								   ELSE Buffer_RAM_Data[]=RxRAM.q_b[];
   END IF;
   -------------------------------------------------------------------------------------------------------------------  
       
    
   ------------------- ������ �������, ���������� ����������� � ��� 
   ParcerCycle_SRFF.(S,clk,R) = ((RAM_Ptr_Packet_End AND RxReadyToRecive.q) OR RxIntStart_ES.q,Clock,ParcerCycleEnd);   -- ���� �� �������� ���������� ������ �� ����� �������� �����
   ParcerCycleEnd = Edge_Sensing_Sync(.d=(MAC_Decoder.Rx_Error_MAC OR ARP_Decoder.Rx_TRUE_RQ OR IPv4_Decoder.Rx_Error_IP OR ARP_Decoder.Rx_IP_Error OR IPv4_CheckSum_Ctrl.IPv4_CheckSum_Complete OR CCCD_Decoder.Rx_TRUE_RQ OR Raw_Decoder.Rx_TRUE_RQ OR Raw_Decoder.Rx_NOT_RQ),.clk=Clock);
   SetRxReadyToRecive_Parcer = Edge_Sensing_Sync(.d=TxRQ_Reset_ES.q OR MAC_Decoder.Rx_Error_MAC OR ARP_Decoder.Rx_IP_Error OR IPv4_Decoder.Rx_Error_IP OR Raw_Decoder.Rx_NOT_RQ,.clk=Clock);

   -- ������� �� ������ �������� ������ �� Tx ������
   AnswerTxStart_ = Edge_Sensing_Sync(.d=ARP_Decoder.Tx_Start OR IPv4_CheckSum_Ctrl.IPv4_CheckSum_Complete OR CCCD_Decoder.Tx_Start OR Raw_Decoder.Tx_Start,.clk=Clock);
   IF(TxRQ_SRFF.q==VCC) THEN AnswerTxStart = Edge_Sensing_Sync(.d=!SRFF(.S=AnswerTxStart_,.clk=Clock,.R=TxRQ_Reset),.clk=Clock); -- ����� ���������, ������� ����� ����������� ����������
						ELSE AnswerTxStart = AnswerTxStart_;
   END IF;
  
   Eth_Tx_End    = TxRQ_Reset_ES.q AND RxTxCycle_IntStart.q;				-- �������������� �������-��������� ����������� ������
   RxTxCycle_IntStart.(S,clk,R) = (RxIntStart_ES.q,Clock, TxRQ_Reset_ES.q);	-- ������ ��� �������� ������ �� �������� ������
															   

  
   -- MAC ����� ������������ � ������������ ������ �� �������� ��������� �� Ethernet 
   MAC_Decoder.Clock = Clock;
   MAC_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset) 	 = (Buffer_RAM_Data[]		 , RAM_Ptr_Packet_End OR RxIntStart_ES.q, SetRxReadyToRecive);
   MAC_Decoder.(MAC_Addr0_[15..8], MAC_Addr0_[7..0]) = (Module_MAC_Reg[0].q[7..0], Module_MAC_Reg[0].q[15..8]);
   MAC_Decoder.(MAC_Addr1_[15..8], MAC_Addr1_[7..0]) = (Module_MAC_Reg[1].q[7..0], Module_MAC_Reg[1].q[15..8]);
   MAC_Decoder.(MAC_Addr2_[15..8], MAC_Addr2_[7..0]) = (Module_MAC_Reg[2].q[7..0], Module_MAC_Reg[2].q[15..8]);
  
   -- ����� MAC-������ ���������� ����������� �������
   FOR i IN 0 TO 2 GENERATE  
      Source_MAC_Reg[i].(data[],clock, load, enable) = (RxRAM.q_b[],Clock,VCC, (Rx_RAM_Address_Bus[] == 3+i) AND MAC_Decoder.Tx_Word_Strobe);
   END GENERATE;
   -- ����������� ����� �������� ����(������������ 4 ����� CRC) � ������������� � 16������ �����
   IF RxTxCycle_IntStart.q == VCC THEN
			Rx_Packet_Lenght_Reg.(data[15..RxByte_Cnt_Width],data[RxByte_Cnt_Width-1..0]) = (B"0000",RxByte_Cnt.q[RxByte_Cnt_Width..1]-(HEADER_LENGTH_WORDS-1));
								  ELSE
			Rx_Packet_Lenght_Reg.(data[15..RxByte_Cnt_Width],data[RxByte_Cnt_Width-1..0]) = (B"0000",RxByte_Cnt.q[RxByte_Cnt_Width..1]-(HEADER_LENGTH_WORDS-1)-3);
   END IF;
   Rx_Packet_Lenght_Reg.(clock,enable,load) = (Clock,RAM_Ptr_Packet_End OR RxIntStart_node,VCC); 

   
   RxWordRecive_Reg.(data[15..RxByte_Cnt_Width],data[RxByte_Cnt_Width-1..0]) = (B"0000",RxByte_Cnt.q[RxByte_Cnt_Width..1]);
   RxWordRecive_Reg.(clock,enable,load) = (Clock,RAM_Ptr_Packet_End OR RxIntStart_node,VCC); 

   
   ARP_Decoder.Clock = Clock;
   ARP_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset) = (Buffer_RAM_Data[],  MAC_Decoder.Next_Parcer, SetRxReadyToRecive);
   ARP_Decoder.(MAC_Addr0_[15..8], MAC_Addr0_[7..0]) = (Module_MAC_Reg[0].q[7..0], Module_MAC_Reg[0].q[15..8]);
   ARP_Decoder.(MAC_Addr1_[15..8], MAC_Addr1_[7..0]) = (Module_MAC_Reg[1].q[7..0], Module_MAC_Reg[1].q[15..8]);
   ARP_Decoder.(MAC_Addr2_[15..8], MAC_Addr2_[7..0]) = (Module_MAC_Reg[2].q[7..0], Module_MAC_Reg[2].q[15..8]);
   ARP_Decoder.(IP_Addr0_[15..8], IP_Addr0_[7..0]) = (Module_IP_Reg[0].q[7..0], Module_IP_Reg[0].q[15..8]);
   ARP_Decoder.(IP_Addr1_[15..8], IP_Addr1_[7..0]) = (Module_IP_Reg[1].q[7..0], Module_IP_Reg[1].q[15..8]);
   
   IPv4_Decoder.Clock = Clock;
   IPv4_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0]-2;
   IPv4_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[],  ARP_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   IPv4_Decoder.(IP_Addr0_[15..8], IP_Addr0_[7..0]) = (Module_IP_Reg[0].q[7..0], Module_IP_Reg[0].q[15..8]);
   IPv4_Decoder.(IP_Addr1_[15..8], IP_Addr1_[7..0]) = (Module_IP_Reg[1].q[7..0], Module_IP_Reg[1].q[15..8]);
   IPv4_Decoder.(Port[15..8], Port[7..0]) 			= (Port_Reg.q[7..0], Port_Reg.q[15..8]);
   IPv4_Decoder.DataBus_In[] = DataBus_In[];
   IPv4_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   
   IPv4_CheckSum_Ctrl.Clock = Clock;
   IPv4_CheckSum_Ctrl.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[], IPv4_Decoder.Tx_Start, SetRxReadyToRecive);
   IPv4_CheckSum_Ctrl.IP_ID[] = IPv4_Decoder.Identification[];
   
   CCCD_Decoder.Clock = Clock;
   CCCD_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0];
   CCCD_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[],  IPv4_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   CCCD_Decoder.Rx_Packet_Lenght[]  = Rx_Packet_Lenght_Reg.q[];--(RxWordRecive_Reg.q[]-(HEADER_LENGTH_WORDS-1));--42);
   CCCD_Decoder.DataBus_In[] = DataBus_In[];
   CCCD_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   
   Raw_Decoder.Clock = Clock;
   Raw_Decoder.Rx_NUM_Data[] = RxWordRecive_Reg.q[RxByte_Cnt_Width-2..0];
   Raw_Decoder.(Rx_Data[], Rx_Parcer_RQ, Reset)    = (Buffer_RAM_Data[], CCCD_Decoder.Rx_NOT_RQ, SetRxReadyToRecive);
   Raw_Decoder.Rx_Packet_Lenght[]  = Rx_Packet_Lenght_Reg.q[];--(RxWordRecive_Reg.q[]-(HEADER_LENGTH_WORDS-1));--42);
   Raw_Decoder.DIMA_Ident[] = Test_Reg.q[];
   Raw_Decoder.DataBus_In[] = DataBus_In[];
   Raw_Decoder.(AccessGranted, DataBusStrobe) = (AccessGranted, DataBusStrobe);
   

   
   
   AccessRequest = IPv4_Decoder.AccessRequest OR Raw_Decoder.AccessRequest OR CCCD_Decoder.AccessRequest;
   DirectOut     = IPv4_Decoder.DirectOut 	  OR Raw_Decoder.DirectOut 	   OR CCCD_Decoder.DirectOut;
   AddrBusOut[]  = IPv4_Decoder.AddrBusOut[]  OR Raw_Decoder.AddrBusOut[]  OR CCCD_Decoder.AddrBusOut[];
    
     
  IF(ParcerCycle_SRFF.q == VCC) THEN  FOR i IN 0 TO RxByte_Cnt_Width-2 GENERATE  
									    Tx_RAM_Address_Bus[i] = DFF(.d=MAC_Decoder.Tx_Addr[i] OR ARP_Decoder.Tx_Addr[i] OR IPv4_Decoder.Tx_Addr[i] OR Raw_Decoder.Tx_Addr[i] OR IPv4_CheckSum_Ctrl.Tx_Addr[i] OR CCCD_Decoder.Tx_Addr[i],.clk=Clock);
									  END GENERATE;
									  Rx_RAM_Address_Bus[]     = MAC_Decoder.Rx_Addr[] OR ARP_Decoder.Rx_Addr[] OR IPv4_Decoder.Rx_Addr[] OR Raw_Decoder.Rx_Addr[] OR IPv4_CheckSum_Ctrl.Rx_Addr[] OR CCCD_Decoder.Rx_Addr[];
									  FOR i IN 0 TO 15 GENERATE 
										Tx_RAM_Data_Bus[i] 	   = DFF(.d=MAC_Decoder.Tx_Data[i] OR ARP_Decoder.Tx_Data[i] OR IPv4_Decoder.Tx_Data[i] OR Raw_Decoder.Tx_Data[i] OR IPv4_CheckSum_Ctrl.Tx_Data[i] OR CCCD_Decoder.Tx_Data[i],.clk=Clock);
									  END GENERATE;
                                      TxRAM_wren			   = DFF(.d=MAC_Decoder.Tx_Word_Strobe OR ARP_Decoder.Tx_Word_Strobe OR IPv4_Decoder.Tx_Word_Strobe OR Raw_Decoder.Tx_Word_Strobe OR IPv4_CheckSum_Ctrl.Tx_Word_Strobe OR CCCD_Decoder.Tx_Word_Strobe,.clk=Clock);
                                 ELSE Tx_RAM_Address_Bus[RxByte_Cnt_Width-2..0] = AddrBus_In[RxByte_Cnt_Width-2..0];
                                      Tx_RAM_Data_Bus[15..8]   = DataBus_In[7..0]; Tx_RAM_Data_Bus[7..0] = DataBus_In[15..8];
                                      TxRAM_wren	           = TxRAM_CS AND DataBusStrobe AND DirectIn AND Select;
                                      Rx_RAM_Address_Bus[]     = AddrBus_In[RxByte_Cnt_Width-2..0];
   END IF;
    
--------------------------------------- BUS Section ---------------------------------------------------   
    
--************************************************************************* 
-- ������ �������� �������� � ���� �������� ������ ��� � ������ ���������� ������ ������
   CASE  (Select, DirectOut,ParcerCycle_SRFF.q) IS          
		  WHEN b"100"  => DataBusOut[]      = DataBusOut_[]; -- ���� ������ �� ��������� ����
		  WHEN b"110"  => DataBusOut[]      = DataBusOut_[]; -- ���� ������ �� ��������� ����
	      WHEN b"011"  => DataBusOut[15..8] = Buffer_RAM_Data[7..0];  -- ���� ������ ������������ ������� �� Ethernet
						  DataBusOut[7..0]  = Buffer_RAM_Data[15..8]; 
 	      WHEN b"111"  => DataBusOut[15..8] = Buffer_RAM_Data[7..0];  -- ���� ������ ������������ ������� �� Ethernet
						  DataBusOut[7..0]  = Buffer_RAM_Data[15..8]; 
		  WHEN b"101"  => DataBusOut[]      = DataBusOut_[];
	      WHEN OTHERS  => DataBusOut[]      = GND; 
   END CASE;
    
--    IF ( (AddrBus_In[] >= 0) AND (AddrBus_In[] < 1024) ) 
--			THEN DataBusOut_[7..0] = TxRAM.q_b[15..8]; DataBusOut_[15..8] = TxRAM.q_b[7..0]; --DataBusOut[] = TxRAM.q_b[];
--				 TxRAM_CS     = VCC;    
--			ELSE TxRAM_CS     = GND;     
--	END IF;
    TxRAM_CS     = GND;
	IF ( (AddrBus_In[] >= 0) AND (AddrBus_In[] < 2048) ) 
			THEN DataBusOut_[7..0] = RxRAM.q_b[15..8]; DataBusOut_[15..8] = RxRAM.q_b[7..0];   --DataBusOut[] = RxRAM.q_b[]; 
				 RxRAM_CS     = VCC;    
			ELSE RxRAM_CS     = GND; 
	END IF;
   
	IF (AddrBus_In[] ==  2048) THEN DataBusOut_[]  = Status_REG.q[];
										Status_REG_CS = VCC;  
								   ELSE Status_REG_CS = GND; 
	END IF;
	IF (AddrBus_In[] ==  2049) 
				THEN SetRxReadyToRecive_Sc_Bus = DataBusStrobe; 
				ELSE SetRxReadyToRecive_Sc_Bus = GND; 
	END IF;
	IF (AddrBus_In[] ==  2050) 
				THEN InternalTxStart    = DataBusStrobe;
				ELSE InternalTxStart    = GND;
	END IF;
	IF (AddrBus_In[] ==  2051) THEN DataBusOut_[] = RxByte_Cnt_Reg.q;--PacketLenghts_to_be_transmitted_Reg.q[];
										PacketLenghts_to_be_transmitted_Reg_CS = VCC;
								   ELSE PacketLenghts_to_be_transmitted_Reg_CS = GND;
	END IF;
	IF (AddrBus_In[] ==  2052) THEN DataBusOut_[] = RxLostPacket_Cnt_REG.q[]; -- ����� �� �������� ������� �� ����� ��������� ��������
										RxLostPacket_Cnt_REG_CS = VCC;
								   ELSE RxLostPacket_Cnt_REG_CS = GND;
	END IF;
        -- MAC-����� � IP-����� ��������
	FOR i IN 0 TO 2 GENERATE  -- MAC-�����
			IF (AddrBus_In[] ==  2053+i) THEN DataBusOut_[] = Module_MAC_Reg[i].q[];
											  Module_MAC_Reg_CS[i] = VCC;
										 ELSE Module_MAC_Reg_CS[i] = GND;
			END IF;
	END GENERATE;
	FOR i IN 0 TO 1 GENERATE  --IP-����� ��������
			IF (AddrBus_In[] ==  2056+i) THEN DataBusOut_[] = Module_IP_Reg[i].q[];
											  Module_IP_Reg_CS[i] = VCC;
										 ELSE Module_IP_Reg_CS[i] = GND;
			END IF;
	END GENERATE;
		
		-- MAC-����� ���������� ������������ ������� ����������
	IF (AddrBus_In[] ==  2058) THEN DataBusOut_[7..0] = Source_MAC_Reg[0].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[0].q[7..0]; END IF;
	IF (AddrBus_In[] ==  2059) THEN DataBusOut_[7..0] = Source_MAC_Reg[1].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[1].q[7..0]; END IF;
	IF (AddrBus_In[] ==  2060) THEN DataBusOut_[7..0] = Source_MAC_Reg[2].q[15..8]; DataBusOut_[15..8] = Source_MAC_Reg[2].q[7..0]; END IF;
		
		-- Port ��������
	IF (AddrBus_In[] ==  2061) THEN DataBusOut_[] = Port_Reg.q[];--DataBusOut[7..0] = Port_Reg.q[15..8]; DataBusOut[15..8] = Port_Reg.q[7..0];
                                        Port_Reg_CS  = VCC;
		                           ELSE Port_Reg_CS  = GND;
	END IF;
		
	IF (AddrBus_In[] ==  2062) THEN DataBusOut_[] = Test_Reg.q[];
                                        Test_Reg_CS  = VCC;
		                           ELSE Test_Reg_CS  = GND;
	END IF;
	
	IF (AddrBus_In[] ==  2063) THEN DataBusOut_[] = IPv4_Decoder.Identification[]; END IF;
	IF (AddrBus_In[] ==  2064) THEN DataBusOut_[] = Raw_Decoder.Identification[];  END IF;
	
	IF (AddrBus_In[] ==  2065) THEN DataBusOut_[] = Rx_Packet_Cnt.q[]; END IF;
	IF (AddrBus_In[] ==  2066) THEN DataBusOut_[] = Tx_Packet_Cnt.q[]; END IF;
	IF (AddrBus_In[] ==  2067) THEN DataBusOut_[] = GND; Rx_Packet_Cnt_Reset = DataBusStrobe AND DirectIn AND Select; 
							   ELSE Rx_Packet_Cnt_Reset = GND;
	END IF;
	IF (AddrBus_In[] ==  2068) THEN DataBusOut_[] = GND; Tx_Packet_Cnt_Reset = DataBusStrobe AND DirectIn AND Select;
							   ELSE Tx_Packet_Cnt_Reset = GND;
	END IF;
	-- ����� ���� ������������ �� �������� ������
	IF (AddrBus_In[] ==  2069) THEN DataBusOut_[] = MASS_RAM_BYTE_Tx_Num; END IF;
		
	IF ( (AddrBus_In[] >= 4096) AND (AddrBus_In[] <= 6143) )
			THEN DataBusOut_[7..0] = RxIntRAM.q_b[15..8]; DataBusOut_[15..8] = RxIntRAM.q_b[7..0]; 
				 RxIntRAM_CS     = VCC;    
			ELSE RxIntRAM_CS     = GND;     
	END IF;
	
   
--***************************************************************************
   
      
    -- MAC-����� � IP-����� ��������
   FOR i IN 0 TO 2 GENERATE  
			Module_MAC_Reg[i].(data[],clock, load, enable) = (DataBus_In[],Clock,VCC, Module_MAC_Reg_CS[i] AND DataBusStrobe AND DirectIn AND Select);
   END GENERATE;
   FOR i IN 0 TO 1 GENERATE  
			Module_IP_Reg[i].(data[],clock, load, enable) = (DataBus_In[],Clock,VCC, Module_IP_Reg_CS[i] AND DataBusStrobe AND DirectIn AND Select);
   END GENERATE;
   Port_Reg.(data[],clock, load, enable) = (DataBus_In[],Clock,VCC, Port_Reg_CS AND DataBusStrobe AND DirectIn AND Select);
   Test_Reg.(data[],clock, load, enable) = (DataBus_In[],Clock,VCC, Test_Reg_CS AND DataBusStrobe AND DirectIn AND Select);
    
   Status_REG_ES.(d,clk) 				   	= (Status_REG_CS AND Select, Clock);
   Status_REG.(clock, load, enable) 	   	= (BUS_Clock, VCC,  Status_REG_ES.q);
   Status_REG.data[12..0]   			   	= RxByte_Cnt.q[];
   Status_REG.data[13]     				   	= RxReadyToRecive.q;
   Status_REG.data[14]     					= GND;--IPv4_Decoder.Rx_NOT_RQ;--RxPacket_in_progress;
   Status_REG.data[15]     				    = VCC;--Raw_Decoder.Tx_Start;--ARP_Decoder.Test;--ARP_Decoder.Rx_Error;%

  
   -- ���������� ����� ������������ ����
   PacketLenghts_to_be_transmitted_Reg.(data[],clock, load, enable) = (PacketLenghts_DataBus[], BUS_Clock, VCC, PacketLenghts_to_be_transmitted_Reg_EN);
   IF(Select==VCC) THEN PacketLenghts_DataBus[] = DataBus_In[];  PacketLenghts_to_be_transmitted_Reg_EN = (PacketLenghts_to_be_transmitted_Reg_CS AND DataBusStrobe AND DirectIn AND Select);
                   ELSE 
						IF RxTxCycle_IntStart.q == VCC THEN
							PacketLenghts_DataBus[RxByte_Cnt_Width..0]  = (RxByte_Cnt.q[]-1); -- �������� 1 ���� ����� ������ Packet_Good_End ��� Packet_bad_End
													   ELSE
							PacketLenghts_DataBus[RxByte_Cnt_Width..0]  = (RxByte_Cnt.q[]-7); -- �������� 7 ���� 
						END IF;
						PacketLenghts_DataBus[15..RxByte_Cnt_Width+1] = GND;
						PacketLenghts_to_be_transmitted_Reg_EN = AnswerTxStart;
   END IF; 
   RxByte_Cnt_Reg.data[RxByte_Cnt_Width..0]  = (RxByte_Cnt.q[]-1);
   RxByte_Cnt_Reg.data[15..RxByte_Cnt_Width+1] = GND;
   RxByte_Cnt_Reg.(clock, load, enable) = (Clock,VCC,Edge_Sensing_Sync(.d=FIFO_to_RxRAM_Copy,.clk=Clock));
   
   ------------ �������� ���������(��������� MAC-�������) � ������������ �������
   Rx_Packet_Cnt.(clock,cnt_en,sclr) = (BUS_Clock,Edge_Sensing_Sync(.d=MAC_Decoder.Next_Parcer,.clk=BUS_Clock),Rx_Packet_Cnt_Reset);  
   Tx_Packet_Cnt.(clock,cnt_en,sclr) = (BUS_Clock,Edge_Sensing_Sync(.d=TxStart,.clk=BUS_Clock),Tx_Packet_Cnt_Reset);  


END;