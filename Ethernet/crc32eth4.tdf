TITLE "Ethernet CRC32";
% 
* Implementation of Ethernet CRC32 Checksum.
*------------------------------------------------------------------------------
* (c) by Andrey V. Ovchar 2000
% 

SUBDESIGN crc32eth4
(
	in[3..0]	: INPUT;	-- Incomming Data inputs.
	clock		: INPUT;	-- Clock.
	reset		: INPUT;	-- No comments.
	enable		: INPUT;	-- Any activity enable.
	write		: INPUT;	-- Crc count enable (or simple shift per nibble)
	
	out[31..0]	: OUTPUT;	-- Current Crc checksum. 
)
VARIABLE
	CRC[31..0] 	: dffe;
BEGIN

	CRC[].(clk, ena) = (clock, enable or reset);
	
	CRC[0].d = ((in[0]) and write xor CRC[28].q) or reset;
    CRC[1].d = ((in[1] xor in[0] xor CRC[28].q) and write xor CRC[29].q) or reset;
    CRC[2].d = ((in[2] xor in[1] xor in[0] xor CRC[28].q xor CRC[29].q) and write xor CRC[30].q) or reset;
    CRC[3].d = ((in[3] xor in[2] xor in[1] xor CRC[29].q xor CRC[30].q) and write xor CRC[31].q) or reset;
    CRC[4].d = ((in[3] xor in[2] xor in[0] xor CRC[28].q xor CRC[30].q xor CRC[31].q) and write xor CRC[0].q) or reset;
    CRC[5].d = ((in[3] xor in[1] xor in[0] xor CRC[28].q xor CRC[29].q xor CRC[31].q) and write xor CRC[1].q) or reset;
    CRC[6].d = ((in[2] xor in[1] xor CRC[29].q xor CRC[30].q) and write xor CRC[2].q) or reset;
    CRC[7].d = ((in[3] xor in[2] xor in[0] xor CRC[28].q xor CRC[30].q xor CRC[31].q) and write xor CRC[3].q) or reset;
    CRC[8].d = ((in[3] xor in[1] xor in[0] xor CRC[28].q xor CRC[29].q xor CRC[31].q) and write xor CRC[4].q) or reset;
    CRC[9].d = ((in[2] xor in[1] xor CRC[29].q xor CRC[30]) and write xor CRC[5].q) or reset;
    CRC[10].d = ((in[3] xor in[2] xor in[0] xor CRC[28].q xor CRC[30].q xor CRC[31].q) and write xor CRC[6].q) or reset;
    CRC[11].d = ((in[3] xor in[1] xor in[0] xor CRC[28].q xor CRC[29].q xor CRC[31].q) and write xor CRC[7].q) or reset;
    CRC[12].d = ((in[2] xor in[1] xor in[0] xor CRC[28].q xor CRC[29].q xor CRC[30].q) and write xor CRC[8].q) or reset;
    CRC[13].d = ((in[3] xor in[2] xor in[1] xor CRC[29].q xor CRC[30].q xor CRC[31].q) and write xor CRC[9].q) or reset;
    CRC[14].d = ((in[3] xor in[2] xor CRC[30].q xor CRC[31].q) and write xor CRC[10].q) or reset;
    CRC[15].d = ((in[3] xor CRC[31].q) and write xor CRC[11].q) or reset;
    CRC[16].d = ((in[0] xor CRC[28].q) and write xor CRC[12].q) or reset;
    CRC[17].d = ((in[1] xor CRC[29].q) and write xor CRC[13].q) or reset;
    CRC[18].d = ((in[2] xor CRC[30].q) and write xor CRC[14].q) or reset;
    CRC[19].d = ((in[3] xor CRC[31].q) and write xor CRC[15].q) or reset;
    CRC[20].d = (CRC[16].q) or reset;
    CRC[21].d = (CRC[17].q) or reset;
    CRC[22].d = ((in[0] xor CRC[28].q) and write xor CRC[18].q) or reset;
    CRC[23].d = ((in[1] xor in[0] xor CRC[28].q xor CRC[29].q) and write xor CRC[19].q) or reset;
    CRC[24].d = ((in[2] xor in[1] xor CRC[29].q xor CRC[30].q) and write xor CRC[20].q) or reset;
    CRC[25].d = ((in[3] xor in[2] xor CRC[30].q xor CRC[31].q) and write xor CRC[21].q) or reset;
    CRC[26].d = ((in[3] xor in[0] xor CRC[28].q xor CRC[31].q) and write xor CRC[22].q) or reset;
    CRC[27].d = ((in[1] xor CRC[29].q) and write xor CRC[23].q) or reset;
    CRC[28].d = ((in[2] xor CRC[30].q) and write xor CRC[24].q) or reset;
    CRC[29].d = ((in[3] xor CRC[31].q) and write xor CRC[25].q) or reset;
    CRC[30].d = (CRC[26].q) or reset;
    CRC[31].d = (CRC[27].q) or reset;
	
	out[31..0] = !CRC[31..0].q;
END;
